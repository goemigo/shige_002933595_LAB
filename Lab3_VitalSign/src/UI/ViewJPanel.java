/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Application;
import Model.Observation;
import Model.VitalSignHistory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author emi
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    private Application application;
    DefaultTableModel viewtableModel;
    Observation selectedObservation;
    
    public ViewJPanel() {
        initComponents();
    }

    ViewJPanel(Application application) {
        initComponents();
        
        this.application = application;
        this.viewtableModel = (DefaultTableModel) observationTable.getModel();
        
        displayObservation();
    }
    
    public void displayObservation(){
        VitalSignHistory history = this.application.getHistory();
        
        if(history.getVitalSignHistory().size()>0){
            
            viewtableModel.setRowCount(0); //this is to avoid a new record for an update
            
            for (Observation o: history.getVitalSignHistory()){
//                System.out.println(o.getObservationId());
                Object row[] = new Object[3];
                row[0] = o;
                row[1] = o.getTemperature();
                row[2] = o.getBloodPressure();
                
                this.viewtableModel.addRow(row);
            }
        }else{
            System.out.println("Empty list");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        fieldId = new javax.swing.JTextField();
        fieldTemp = new javax.swing.JTextField();
        fieldBloodPressure = new javax.swing.JTextField();
        updateBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        observationTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        viewObservationBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setText("Blood Pressure");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, -1, -1));

        fieldId.setEnabled(false);
        add(fieldId, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 80, -1));
        add(fieldTemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, 80, -1));
        add(fieldBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 80, -1));

        updateBtn.setText("Update Observation");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 313, -1, -1));

        jLabel1.setText("ID");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, -1, -1));

        jLabel2.setText("Temperature");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, -1, -1));

        observationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Temp", "BP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(observationTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, 320, 210));

        jLabel4.setText("View And Update A Vital Sign Observation");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));

        viewObservationBtn.setText("View Details");
        viewObservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewObservationBtnActionPerformed(evt);
            }
        });
        add(viewObservationBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 310, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void viewObservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewObservationBtnActionPerformed
        // TODO add your handling code here:
        //get the row in the table that was clicked
        int selectedRow = observationTable.getSelectedRow();
        
        if (selectedRow >= 0){
            //fetch the observation object (column 0 is the id, which has been set as type Object)
            this.selectedObservation = (Observation) observationTable.getValueAt(selectedRow, 0);
            
            //fill the text fields
            fieldId.setText(String.valueOf(selectedObservation.getObservationId()));
            fieldTemp.setText(String.valueOf(selectedObservation.getTemperature()));
            fieldBloodPressure.setText(String.valueOf(selectedObservation.getBloodPressure()));
            
        }else{
            //no selection
            JOptionPane.showMessageDialog(null,"Please select a row!");
        }
    }//GEN-LAST:event_viewObservationBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        if(!fieldId.getText().isEmpty()){
            
            //call the find observation method
//            Observation o = this.application.getHistory().findObservation(Integer.valueOf(fieldId.getText()));
            //store new value to the selected row
//            o.setTemperature(Double.valueOf(fieldTemp.getText()));
//            o.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
            
//        or use the selectedObservation directly
            this.selectedObservation.setTemperature(Double.valueOf(fieldTemp.getText()));
            this.selectedObservation.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
            JOptionPane.showMessageDialog(null,"Updated");
        }else{
            JOptionPane.showMessageDialog(null,"You have not made any selection.");
        }
        
        //this is to directly change the value in the table 
        //remember to set the row count to 0 in the display method
        displayObservation(); 
        
    }//GEN-LAST:event_updateBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldBloodPressure;
    private javax.swing.JTextField fieldId;
    private javax.swing.JTextField fieldTemp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable observationTable;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton viewObservationBtn;
    // End of variables declaration//GEN-END:variables
}
